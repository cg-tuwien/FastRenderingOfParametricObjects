#version 460
#extension GL_EXT_shader_16bit_storage                   : require
#extension GL_EXT_shader_8bit_storage                    : require
#extension GL_EXT_mesh_shader                            : require
#extension GL_EXT_nonuniform_qualifier                   : require
#extension GL_EXT_shader_image_int64                     : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive                   : enable
#extension GL_KHR_shader_subgroup_arithmetic             : require
#extension GL_KHR_shader_subgroup_ballot                 : require
#extension GL_KHR_shader_subgroup_shuffle                : require
#extension GL_EXT_debug_printf                           : enable

layout (constant_id = 0) const uint NUM_TASK_SHADER_INVOCATIONS_X = 1;
layout (constant_id = 1) const uint NUM_TASK_SHADER_INVOCATIONS_Y = 1;
layout (constant_id = 2) const uint NUM_MESH_SHADER_INVOCATIONS_X = 1;
layout (constant_id = 3) const uint NUM_MESH_SHADER_INVOCATIONS_Y = 1;
layout(local_size_x_id = 2, local_size_y_id = 3, local_size_z = 1) in;
#define MAX_VERTICES   64
#define MAX_PRIMITIVES 98
// max_vertices = 8x8, max_primitives = 7x7x2
layout(triangles, max_vertices = MAX_VERTICES, max_primitives = MAX_PRIMITIVES) out;

#include "../shader_includes/util/ui64_conv.glsl"
#include "../shader_includes/util/glsl_helpers.glsl"
#include "../shader_includes/types.glsl"
#include "../shader_includes/param/shape_functions.glsl"
#include "../shader_includes/shading_model.glsl"
#include "../shader_includes/common_ubo.glsl"
#include "../shader_includes/parametric_curve_helpers.glsl"
#include "../shader_includes/task_mesh_shared_1st.glsl"

#define MAX_COLORS 8
vec3 groupcolors[MAX_COLORS] = {
    vec3(0.37, 0.63, 0.28), // Existing color: Greenish
    vec3(0.75, 0.95, 0.75), // Existing color: Whitish
    vec3(0.1, 0.4, 0.15),   // Dark green
    vec3(0.2, 0.6, 0.3),    // Medium green
    vec3(0.45, 0.8, 0.55),  // Light green
    vec3(0.6, 0.9, 0.65),   // Pale green
    vec3(0.25, 0.7, 0.4),   // Bright green
    vec3(0.15, 0.5, 0.25)   // Deep green
};

// ###### COMBINED ATTACHMENT #############################
layout(set = 1, binding = 0, r64ui) uniform restrict u64image2D uCombinedAttachment;
layout(set = 1, binding = 1, r32ui) uniform restrict uimage2D   uHeatmapImage;
// -------------------------------------------------------
#include "../shader_includes/combined_attachment_shared.glsl"

// ###### INDIRECT DRAW PARAMS ############################
layout(set = 2, binding = 0) buffer DrawMeshTasksParameters { indirect_mesh_task_parameters mValues[]; } uDrawMeshTasksParameters; 
layout(set = 2, binding = 1) buffer DrawMeshTasksDrawCount  { uint mValue;  } uDrawMeshTasksDrawCount;
// --------------------------------------------------------

// +------------------------------------------------------------------------------+
// |   in/out and structs                                                         |
// +------------------------------------------------------------------------------+

layout (location = 0) out PerVertexData
{
	vec3 positionWS;
	vec3 normalWS;
	vec3 color;
} v_out[];   // [max_vertices]

// A struct to hold auxiliary data of the neighboring invocation:
struct NeighborData 
{
	uint  invocationIndex;
	vec4  posCS;
	ivec2 screenCoords;
	int   pixelDist;
};

// ###### MAIN ###########################
void main() 
{
	if (pushConstants.mGatherPipelineStats) {
		atomicAdd(uCounters.mCounters[1], 1);
	}

	uint groupId      = calcGroupIndex(gl_WorkGroupID.x, gl_WorkGroupID.y);
//	if (payload[groupId].mTaskGroupIndex != 0) return;
//	if (groupId != 20) return;

	MeshShaderRange dataFromTask = payload[groupId];
	const vec2 startParams = vec2(dataFromTask.mParams[0].mFrom, dataFromTask.mParams[1].mFrom);
	const vec2 endParams   = vec2(dataFromTask.mParams[0].mTo  , dataFromTask.mParams[1].mTo  );
	const vec2 paramRange  = endParams - startParams;

	// Project both, start and end, to screen to figure out how often we have to loop here in the Mesh Shader:
	vec3 screenCoordsStart = paramToScreen(startParams.x, startParams.y);
	vec3 screenCoordsX     = paramToScreen(endParams.x  , startParams.y);
	vec3 screenCoordsY     = paramToScreen(startParams.x, endParams.y  );
	vec3 screenCoordsXY    = paramToScreen(endParams.x  , endParams.y  );
	vec2 pixelDists = guesstimatePixelsCovered(screenCoordsStart, screenCoordsX, screenCoordsXY, screenCoordsY);
	// How often do we have to iterate over the data in order to fill the area:
	uvec2 numPixelProducingInvocations = uvec2(gl_WorkGroupSize.xy) - uvec2(1, 1);
	uvec2 numTiles = (uvec2(ceil(pixelDists)) + numPixelProducingInvocations - uvec2(1, 1)) / numPixelProducingInvocations;
	if (ubo.mLimitFilledPixelsInMeshShaders) {
		numTiles = clamp(numTiles, uvec2(1, 1), max(uvec2(2, 2), uvec2(ubo.mDebugSlidersi[2], ubo.mDebugSlidersi[3])));
	}

//	if (gl_WorkGroupID.xy != uvec2(1, 0)) return;

//	if (gl_LocalInvocationIndex == 0) {
//		debugPrintfEXT("Gonna create %u x %u tiles in mesh shader for pixelDists %f x %f ", numTiles.x, numTiles.y, pixelDists.x, pixelDists.y);
//	}

	// Value ranges: 
	vec2 tileParamRange = paramRange / vec2(numTiles);
	vec2 tileParamStep  = tileParamRange / vec2(numPixelProducingInvocations);

	uint myInvocationIndex = calcInvocationIndex(gl_LocalInvocationID.x, gl_LocalInvocationID.y);

	// Neighbor invocation IDs:
	NeighborData neighborX, neighborY, neighborXY;
	uint neighborShiftX  = gl_LocalInvocationID.x + 1;
	if (neighborShiftX  >= gl_WorkGroupSize.x) { neighborShiftX -= 2; }
	uint neighborShiftY  = gl_LocalInvocationID.y + 1;
	if (neighborShiftY  >= gl_WorkGroupSize.y) { neighborShiftY -= 2; }
	neighborX.invocationIndex  = calcInvocationIndex(neighborShiftX, gl_LocalInvocationID.y);
	neighborY.invocationIndex  = calcInvocationIndex(gl_LocalInvocationID.x, neighborShiftY);
	neighborXY.invocationIndex = calcInvocationIndex(neighborShiftX, neighborShiftY);

	vec2 trianglesRangeFrom = endParams;
	vec2 trianglesRangeTo   = startParams;
	uint overallMaxX        = 0;
	uint overallMaxY        = 0;
	uint overallMaxDist     = 0;

	uint insertOffset = 0;
	const bool isPixelProducingInvocation = gl_LocalInvocationID.x < (gl_WorkGroupSize.x-1) && gl_LocalInvocationID.y < (gl_WorkGroupSize.y-1);
	for (uint ix = 0; ix < numTiles.x; ++ix) {
		for (uint iy = 0; iy < numTiles.y; ++iy) {
			int fillHoles = ubo.mHoleFillingEnabled ? 4 : 1;
			for (int again = 0; again < fillHoles; ++again) { // max. 4 iterations in total
				vec2 offset = tileParamStep * 0.5 * vec2(float(again & 0x1), float((again >> 1) & 0x1));
				//     ^ this offset applies x-only first (01), then y-only (10), then x and y (11)
				vec2 tileParamStart = startParams + offset + tileParamRange * vec2(ix, iy);
				vec2 invocParam = tileParamStart + tileParamStep * vec2(gl_LocalInvocationID.xy);

				// ------> PARAMETRIC FUNCTION:
				vec3 posWS = paramToWS(invocParam.x, invocParam.y);
				// ### SUBGROUP SHUFFLE:
				vec3 posNeighborX  = subgroupShuffle(posWS, neighborX.invocationIndex);
				vec3 posNeighborY  = subgroupShuffle(posWS, neighborY.invocationIndex);
				vec3 posNeighborXY = subgroupShuffle(posWS, neighborXY.invocationIndex);
			
				vec3 n = calculateNormalWS(posWS, posNeighborX, posNeighborY);
				vec4 posCS = toCS(posWS);
	
				// Is this point even inside the view frustum?
				uint isOff = is_off_screen(posCS); 
				bool isInsideFrustum = isOff == 0;

				bool backfaceCull = ubo.mResolutionAndCulling.z == 1 && normalize(mat3(ubo.mViewMatrix) * n).z < 0.0;
				uint setPixel = isPixelProducingInvocation && isInsideFrustum && !backfaceCull ? 1 : 0;

				// Bail-out early?
				// ### SUBGROUP MAX:
				uint setAnyPixel = subgroupMax(setPixel);
				if (0 == setAnyPixel) {
					break;
				}
				
				vec3  vpc          = toScreen(posCS);
				ivec2 screenCoords = ivec2(vpc.xy);

				if (ubo.mHoleFillingEnabled && again == 0) {
					// Now ask all the neighboring  invocations where they have set their screenCoords:
					// ### SUBGROUP SHUFFLE:
					neighborX.screenCoords  = subgroupShuffle(screenCoords, neighborX.invocationIndex );
					neighborY.screenCoords  = subgroupShuffle(screenCoords, neighborY.invocationIndex );
					neighborXY.screenCoords = subgroupShuffle(screenCoords, neighborXY.invocationIndex);
					// Calculate Chebyshev distance (max of any dimensions):
					neighborX.pixelDist     = isPixelProducingInvocation ? maxOf(abs(neighborX.screenCoords  - screenCoords)) : 0;
					neighborY.pixelDist     = isPixelProducingInvocation ? maxOf(abs(neighborY.screenCoords  - screenCoords)) : 0;
					neighborXY.pixelDist    = isPixelProducingInvocation ? maxOf(abs(neighborXY.screenCoords - screenCoords)) : 0;

					// ### SUBGROUP MAX:
					int maxX      = subgroupMax(neighborX.pixelDist);
					int maxY      = subgroupMax(neighborY.pixelDist);
					int maxXY     = subgroupMax(neighborXY.pixelDist);
					int maxDist   = max(max(maxX, maxY), maxXY);

//					if (gl_WorkGroupID.x == 16)
//						debugPrintfEXT("numTiles[%u x %u], maxDist[%d], maxX[%d], maxY[%d], maxXY[%d] ", numTiles.x, numTiles.y, maxDist, maxX, maxY, maxXY);

//					if (neighborX.pixelDist == 3) 
//						debugPrintfEXT("x dist == 3 in invocation(%u, %u)", gl_LocalInvocationID.x, gl_LocalInvocationID.y);
//					if (neighborY.pixelDist == 3) 
//						debugPrintfEXT("y dist == 3 in invocation(%u, %u)", gl_LocalInvocationID.x, gl_LocalInvocationID.y);
//					if (neighborXY.pixelDist == 3) 
//						debugPrintfEXT("xy dist == 3 in invocation(%u, %u)", gl_LocalInvocationID.x, gl_LocalInvocationID.y);

					switch (maxDist) 
					{
					case 0:
					case 1: 
						// We're done here, all holes filled
						fillHoles = 0;
						break;
					case 2: // Normally, we would have to iterate 3 more times..
						// ...unless no need for that in x-direction:
						if (maxX <= 1) {
							again += 1; // Jump over x
							// ...and y-direction:
							if (maxY <= 1) {
								again += 1; // Jump over y
							}
						}
						// ...or the diagonal is not the max:
						if (maxXY <= 1) {
							fillHoles -= 1;
							// ...or y-direction not either:
							if (maxY <= 1) {
								fillHoles -= 1;
							}
						}
						break;
					default:
						if (ubo.m2ndPassEnabled || ubo.mCreateTrianglesEnabled)
						{
							// Otherwise the holes are too strong => schedule another indirect call
	//						debugPrintfEXT("the holes are too strong => schedule another indirect call");
							setPixel = 0;
							fillHoles = 0; // => bail out of inner loop
						
							// Spawn triangles OR schedule another indirect draw call,
							//  ^ in the range where we have missing data:
							trianglesRangeFrom = min(trianglesRangeFrom, tileParamStart);
							trianglesRangeTo   = max(trianglesRangeTo  , tileParamStart + tileParamRange);

							overallMaxX        = max(overallMaxX,    maxX);
							overallMaxY        = max(overallMaxY,    maxY);
							overallMaxDist     = max(overallMaxDist, maxDist);
						}
						break;
					}
				}

				if (1 == setPixel) {
					vec3 myColor = groupcolors[groupId % MAX_COLORS];
//					myColor.r += 0.5 * float(again);
//					myColor.b += 0.5 * float(again);
//					myColor = vec3(1.0);
					writeToCombinedAttachment(screenCoords, vpc.z, shade(myColor, n));

				}
			}
//			break;
		}
//		break;
	}

	bool spawnTriangles     = false;
	if (ubo.mCreateTrianglesEnabled) {
		const uint HOUSENUMBER = 8; // TODO: find a good value
		if (overallMaxDist < HOUSENUMBER) { 
			spawnTriangles = true;
		}
	}
	
	if (!spawnTriangles && ubo.m2ndPassEnabled && gl_LocalInvocationIndex == 0) {
		// Let's just estimate what a good number of task shader invocations might be based on the maximum pixel distances
		// They can be interpreted as a factor by which we had too few invocations now.
		// So, what would be great numbers of invocations to have?
		// 
		// In this mesh shader, we have the following number of total invocations:
		uvec2 totalInvocs = numTiles * numPixelProducingInvocations;
		// ^ they led to the overallMaxDist "error".
		
		// Rough estimation about how many invocations we SHOULD have had to have NO pixel error at all:
		uvec2 goodInvocs = totalInvocs * overallMaxDist;

		// => We are analyzing the data in the 2nd level task shader quadrants:
		const uvec2 LEVEL2_TASK_QUADRANTS = uvec2(NUM_TASK_SHADER_INVOCATIONS_X, NUM_TASK_SHADER_INVOCATIONS_Y);
		//  => How many of those do we need?
		const uvec2 GOOD_MESH_INVOCS = uvec2(128, 128); // TODO: To be empirically determined which #meshinvocations is great across various GPUs
		// And for every task invocation, it is okay to spawn that many mesh invocations => divisor:
		const uvec2 LEVEL2_DIVISOR = LEVEL2_TASK_QUADRANTS * GOOD_MESH_INVOCS;

		uvec2 level2TaskDims = (goodInvocs + LEVEL2_DIVISOR - uvec2(1, 1)) / LEVEL2_DIVISOR;
		level2TaskDims = clamp(level2TaskDims, uvec2(0), uvec2(25));
		
//		if (level2TaskDims.x > 3 || level2TaskDims.y > 3)
//			debugPrintfEXT("totalInvocs[%u, %u], goodInvocs[%u, %u], level2TaskDims[%u, %u]", totalInvocs.x, totalInvocs.y, goodInvocs.x, goodInvocs.y, level2TaskDims.x, level2TaskDims.y);
		
		uint insertIndex = atomicAdd(uDrawMeshTasksDrawCount.mValue, 1);
		if (insertIndex < MAX_INDIRECT_DRAW_CALLS) {
//			debugPrintfEXT("T[%u]/M[%u] -> New ind. draw call at[%u] with taskDims[%u, %u] | orig-range[(%f,%f) -> (%f,%f)], indirect-range[(%f,%f) -> (%f,%f)]", paramRanges[groupId].mTaskGroupIndex, groupId, insertIndex, level2TaskDims.x, level2TaskDims.y, startParams.x, startParams.y, endParams.x, endParams.y, trianglesRangeFrom.x, trianglesRangeFrom.y, trianglesRangeTo.x, trianglesRangeTo.y);
//			debugPrintfEXT("T[%u]/M[%u] -> New ind. draw call at[%u] with taskDims[%u, %u]", paramRanges[groupId].mTaskGroupIndex, groupId, insertIndex, level2TaskDims.x, level2TaskDims.y);
			uDrawMeshTasksParameters.mValues[insertIndex].mDrawParams[0] = level2TaskDims.x; // x 
			uDrawMeshTasksParameters.mValues[insertIndex].mDrawParams[1] = level2TaskDims.y; // y 
			uDrawMeshTasksParameters.mValues[insertIndex].mDrawParams[2] = 1; // z
			uDrawMeshTasksParameters.mValues[insertIndex].mTranslationAndCurveIndex = vec4(pushConstants.mTranslation, intBitsToFloat(pushConstants.mCurveIndex));
			uDrawMeshTasksParameters.mValues[insertIndex].mParams[0].mFrom = trianglesRangeFrom.x;
			uDrawMeshTasksParameters.mValues[insertIndex].mParams[0].mTo   = trianglesRangeTo.x;
			uDrawMeshTasksParameters.mValues[insertIndex].mParams[1].mFrom = trianglesRangeFrom.y;
			uDrawMeshTasksParameters.mValues[insertIndex].mParams[1].mTo   = trianglesRangeTo.y;
		}
	}

	vec2 trianglesRange = trianglesRangeTo - trianglesRangeFrom;
//	debugPrintfEXT("trianglesRangeFrom[%f, %f], trianglesRangeTo[%f, %f], startParams[%f, %f], endParams[%f, %f]", trianglesRangeFrom.x, trianglesRangeFrom.y, trianglesRangeTo.x, trianglesRangeTo.y, startParams.x, startParams.y, endParams.x, endParams.y);
	float epsilon = 1e-5;
	uvec2 meshOutputs = spawnTriangles && trianglesRange.x > epsilon && trianglesRange.y > epsilon ? uvec2(MAX_VERTICES, MAX_PRIMITIVES) : uvec2(0, 0);
	SetMeshOutputsEXT(meshOutputs[0], meshOutputs[1]);
	
	if (!spawnTriangles) {
		return; // bail out.
		// Indirect draw calls data has already been written.
		// Only if there are some triangles to be spawned, we're going to execute the following code.
	}

	const uvec2 VERTICES_DIM = uvec2(8, 8);
	const uvec2 PRIMITIVES_DIM = VERTICES_DIM - uvec2(1, 1);
	const uvec2 LOOPS = VERTICES_DIM / gl_WorkGroupSize.xy; // assume it is divisible without rest
	vec2 trianglesStep = trianglesRange / PRIMITIVES_DIM;
	for(uint ix = 0; ix < LOOPS.x; ix += 1) {
		for (uint iy = 0; iy < LOOPS.y; iy += 1) {
			uint xid  = gl_LocalInvocationID.x + ix*gl_WorkGroupSize.x;
			uint yid  = gl_LocalInvocationID.y + iy*gl_WorkGroupSize.y;
			uint triId = xid + VERTICES_DIM.x * yid;
			float paramX = trianglesRangeFrom.x + trianglesStep.x * float(xid);
			float paramY = trianglesRangeFrom.y + trianglesStep.y * float(yid);
			vec3 posWS = paramToWS(paramX, paramY);
			vec3 nrmWS = calculateNormalWS(posWS, paramToWS(paramX + tileParamStep.x, paramY), paramToWS(paramX, paramY + tileParamStep.y));
			gl_MeshVerticesEXT[triId].gl_Position = toCS(posWS);
			v_out[triId].positionWS = posWS;
			v_out[triId].normalWS   = nrmWS;
			v_out[triId].color      = vec3(0.8, 0.2, 0.3);
			if (xid < VERTICES_DIM.x-1 && yid < VERTICES_DIM.y-1) { // => write primitives
				uint primitiveIndex = PRIMITIVES_DIM.x * 2 * (gl_LocalInvocationID.y + iy*gl_WorkGroupSize.y) + gl_LocalInvocationID.x * 2;
				uint triIdX   = (gl_LocalInvocationID.x+1 + ix*gl_WorkGroupSize.x) + VERTICES_DIM.x * (yid);
				uint triIdY   = (xid                                             ) + VERTICES_DIM.x * (gl_LocalInvocationID.y+1 + iy*gl_WorkGroupSize.y);
				uint triIdXY  = (gl_LocalInvocationID.x+1 + ix*gl_WorkGroupSize.x) + VERTICES_DIM.x * (gl_LocalInvocationID.y+1 + iy*gl_WorkGroupSize.y);
				gl_PrimitiveTriangleIndicesEXT[primitiveIndex]   = uvec3(triId, triIdY, triIdX);
				gl_PrimitiveTriangleIndicesEXT[primitiveIndex+1] = uvec3(triIdY, triIdXY, triIdX);
			}
		}
	}
}
